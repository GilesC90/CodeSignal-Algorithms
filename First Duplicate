// Given an array a that contains only numbers in the range from 1 to a.length, find the first duplicate number for which the second occurrence has the minimal index. In other words, if there are more than 1 duplicated numbers, return the number for which the second occurrence has a smaller index than the second occurrence of the other number does. If there are no such elements, return -1.

// Example

// For a = [2, 1, 3, 5, 3, 2], the output should be solution(a) = 3.

// There are 2 duplicates: numbers 2 and 3. The second occurrence of 3 has a smaller index than the second occurrence of 2 does, so the answer is 3.

// For a = [2, 2], the output should be solution(a) = 2;

// For a = [2, 4, 3, 5, 1], the output should be solution(a) = -1.

// Input/Output

// [execution time limit] 4 seconds (js)

// [input] array.integer a

// Guaranteed constraints:
// 1 ≤ a.length ≤ 105,
// 1 ≤ a[i] ≤ a.length.

// [output] integer

// The element in a that occurs in the array more than once and has the minimal index for its second occurrence. If there are no such elements, return -1.




function solution(a) {
        // First Solution (Brute Force)
    // O(n^2) time complexity
    
    // create a variable that is as big as possible
    // so that we can easily update with a smaller 
    // position if a duplicate exists 
    let first_second_index = a.length;
    // initiate a for loop where we have our first pointer
    // that keeps track of the number that we are attempting
    // to find the duplicate of
    for(let i = 0; i < a.length; i++)
    {   
        // initiate a second loop where we have our pointer
        // that will keep track of any potential duplicates
        // in the array
        for(let j = i + 1; j < a.length; j++)
        {
            // if a duplicate is found, we will compare whether the 
            // index position of that duplicate has come before
            // the end of the array and update if necessary
            if(a[i] == a[j])
            {
                first_second_index = Math.min(first_second_index, j)
            }
        }
    }
    // if we have not found a duplicate inside of our
    // array, we will return the sentinal value of -1
    if(first_second_index == a.length)
    {
        return -1
    }
    // if we did find a duplicate, we will simply return the value
    // of the number residing at the index position of our variable
    return a[first_second_index];
    
    // Second Solution (Linear)
    // Space complexity can be used to speed up time complexity
    
    // We want to instantiate a Hash Set that will be used to keep track 
    // of each number that we have already seen and will be able to 
    // linearly see the first duplicate as we scan through the 
    // array once
    let alreadySeen = new Set();
    // create a for loop to loop through our array
    for(let i = 0; i < a.length; i++)
    {   
        // if we have already seen the integer at
        // a[i], we want to immediately return that 
        // value and get out of the loop
        if(alreadySeen.has(a[i]))
        {
            return a[i];
        }
        // if we haven't seen the integer at a[i],
        // we just want to add it to our Hash Set.
        else
        {
            alreadySeen.add(a[i]);
        }
    }
    // if there are no duplicates inside of our array
    // then we want to return the sentinal value of -1
    return -1
}
